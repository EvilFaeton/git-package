#!/usr/bin/env node

const path = require('path')
const shell = require('shelljs')
const semver = require('semver')
const fs = require('fs')

require('chomp')

const repoPath = process.cwd()
const pkgPath = path.resolve(repoPath, 'package.json')
const pkg = require(pkgPath)
const config = pkg.gitPackage || {}
const [
  _node,
  _script,
  versionComponent = 'minor'
] = process.argv
const nextVersion = semver.inc(pkg.version, versionComponent)
const isPrerelease = /^pre/.test(versionComponent)
const releaseBranch = config.branch || 'master'

const checkBranch = _ => {
  const currentBranch = shell.exec(`git rev-parse --abbrev-ref HEAD`, { silent: true }).chomp()

  if (!isPrerelease && currentBranch !== releaseBranch) {
    process.stderr.write(`ERROR git-package: must run from ${releaseBranch} branch, or do a prerelease ( ex: git-package preminor )\n`)
    process.exit(1)
  }
}

const build = _ => {
  if (shell.exec('npm run build').code !== 0) {
    process.exit(1)
  }
}

const bump = _ => {
  fs.writeFileSync(
    pkgPath,
    JSON.stringify(
      Object.assign(
        {},
        pkg,
        { version: nextVersion }
      ),
      null,
      2
    )
  )
}

const commit = _ => {
  shell.exec(`git commit --all --no-verify --message 'Version ${nextVersion}'`)
  shell.exec(`git checkout -b release/v${nextVersion}`)

  if (config.includeIgnored) {
    shell.sed('-i', `^(${config.includeIgnored.join('|')})$`, '', path.resolve(repoPath, '.gitignore'))
  }

  shell.exec(`git add .`)
  shell.exec(`git commit --all --no-verify --message 'Release commit of version ${nextVersion}'`)
  shell.exec(`git tag v${nextVersion}`)
  shell.exec(`git push --set-upstream origin release/v${nextVersion}`)
  shell.exec(`git checkout -`)
  shell.exec(`git push`)
  shell.exec(`git push --tags`)
}

checkBranch()
build()
bump()
commit()
